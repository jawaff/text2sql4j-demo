/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.text2sql4j.api

import com.text2sql4j.api.verticles.RESTVerticle
import io.vertx.core.Vertx
import io.vertx.core.VertxOptions
import io.vertx.kotlin.coroutines.await
import kotlinx.coroutines.DelicateCoroutinesApi
import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import java.util.concurrent.atomic.AtomicReference

private val LOGGER: Logger = LoggerFactory.getLogger("MainKt")
private val vertxRef: AtomicReference<Vertx?> = AtomicReference()

@DelicateCoroutinesApi
fun main() {
    runBlocking {
        startVertx()
    }

    Runtime.getRuntime().addShutdownHook(object : Thread() {
        override fun run() {
            runBlocking {
                launch {
                    vertxRef.get()?.also { stopVertx(it) }
                }
            }
        }
    })
}

suspend fun startVertx(): Vertx {
    val vertxOptions = VertxOptions()
    val vertx = Vertx.vertx(vertxOptions)
    vertxRef.set(vertx)

    coroutineScope {
        launch {
            vertx.deployVerticle(RESTVerticle())
                .onFailure { killPrematurely("Failed to deploy REST Server", it) }
                .await()
        }
    }

    return vertx
}

suspend fun stopVertx(vertx: Vertx) {
    vertx.close().await()
}

fun killPrematurely(message: String, error: Throwable? = null) {
    if (error == null) {
        LOGGER.error(message)
    } else {
        LOGGER.error(message, error)
    }

    vertxRef.get()?.close()
}
