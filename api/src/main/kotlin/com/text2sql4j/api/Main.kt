/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.text2sql4j.api

import com.fasterxml.jackson.module.kotlin.registerKotlinModule
import com.text2sql4j.api.models.codecs.SqlTranslateInputsCodec
import com.text2sql4j.api.verticles.MigrationVerticle
import com.text2sql4j.api.verticles.RESTVerticle
import com.text2sql4j.api.verticles.TranslatorVerticle
import com.text2sql4j.translator.models.SqlTranslateInputs
import io.vertx.core.Vertx
import io.vertx.core.VertxOptions
import io.vertx.core.json.jackson.DatabindCodec
import io.vertx.kotlin.coroutines.await
import io.vertx.pgclient.PgConnectOptions
import io.vertx.pgclient.PgPool
import io.vertx.sqlclient.PoolOptions
import kotlinx.coroutines.DelicateCoroutinesApi
import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import java.nio.file.Paths
import java.util.concurrent.atomic.AtomicReference

private val LOGGER: Logger = LoggerFactory.getLogger("MainKt")
private val vertxRef: AtomicReference<Vertx?> = AtomicReference()

@DelicateCoroutinesApi
fun main() {
    runBlocking {
        startVertx(doInsertDataset = true)
    }

    Runtime.getRuntime().addShutdownHook(object : Thread() {
        override fun run() {
            runBlocking {
                launch {
                    vertxRef.get()?.also { stopVertx(it) }
                }
            }
        }
    })
}

suspend fun startVertx(doInsertDataset: Boolean): Vertx {
    val vertxOptions = VertxOptions()
    val vertx = Vertx.vertx(vertxOptions)
    vertxRef.set(vertx)

    DatabindCodec.mapper()
        .registerKotlinModule()

    vertx.eventBus().registerDefaultCodec(SqlTranslateInputs::class.java, SqlTranslateInputsCodec())

    val databaseHost = "localhost"
    val databasePort = 5432
    val databaseName = "movies"
    val databaseUsername = "postgres"
    val databasePassword = "postgres"
    val connectionPoolSize = 20

    val pgPool = PgPool.pool(
        vertx,
        PgConnectOptions()
            .setHost(databaseHost)
            .setPort(databasePort)
            .setDatabase(databaseName)
            .setUser(databaseUsername)
            .setPassword(databasePassword),
        PoolOptions().setMaxSize(connectionPoolSize).setShared(true)
    )

    LOGGER.info("Starting Server")
    vertx.deployVerticle(
        MigrationVerticle(
            "$databaseHost:$databasePort",
            databaseName,
            databaseUsername,
            databasePassword
        )
    )
        .onFailure { killPrematurely("Failed to deploy Migration Verticle", it) }
        .await()

    vertx.deployVerticle(TranslatorVerticle(Paths.get("../python-translator/")))
        .onFailure { killPrematurely("Failed to deploy Translator Verticle", it) }
        .await()

    vertx.deployVerticle(RESTVerticle(pgPool, doInsertDataset))
        .onFailure { killPrematurely("Failed to deploy REST Server", it) }
        .await()
    LOGGER.info("Started Server")

    return vertx
}

suspend fun stopVertx(vertx: Vertx) {
    vertx.close().await()
}

fun killPrematurely(message: String, error: Throwable? = null) {
    if (error == null) {
        LOGGER.error(message)
    } else {
        LOGGER.error(message, error)
    }

    vertxRef.get()?.close()
}
